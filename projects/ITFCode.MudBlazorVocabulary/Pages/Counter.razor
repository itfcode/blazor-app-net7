@page "/counter"

<style>
    button.letter {
        padding-right: 4px;
        padding-left: 4px;
        min-width: 30px !important;
        font-size: 18px !important;
    }
</style>

<PageTitle>Counter</PageTitle>

<MudGrid>

    <MudItem xs="4">
        <MudText Typo="Typo.h6" GutterBottom="true">Counter</MudText>
    </MudItem>

    <MudItem xs="4">
        <MudText Class="mb-4">Current count: @currentCount</MudText>
    </MudItem>

    <MudItem xs="4">
        <MudButton Color="Color.Tertiary" Variant="Variant.Filled"
                   @onclick="IncrementCount">Load Vocabulary</MudButton>
    </MudItem>
</MudGrid>

<MudGrid>
    <MudItem xs="12">

        <MudTable Items="_dictionary" Hover="true"
                  Breakpoint="Breakpoint.Sm"
                  Filter="new Func<KeyValuePair<string,string>,bool>(FilterFunc)"
                  LoadingProgressColor="Color.Info">

            <ToolBarContent>
                <div style="text-align:center;width:100%;">
                    @foreach (var letter in _letters)
                    {
                        if (_letterFilter.Contains(letter))
                        {
                            <MudButton Variant="Variant.Text" Class="letter" Color="Color.Error"
                               OnClick="(arg) => InExLetter(letter)">@letter</MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Text" Class="letter"
                               OnClick="(arg) => InExLetter(letter)">@letter</MudButton>
                        }
                    }
                </div>
            </ToolBarContent>

            <HeaderContent>

                <MudTh Class="th-header-original" Style="width:50%;">Original</MudTh>

                <MudTh Class="th-header-translation-ru1" Style="width:50%;">

                    @*<MudText> Translation </MudText>*@
                    <MudToggleIconButton Toggled="@AlarmOn"
                                         ToggledChanged="OnToggledChanged"
                                         Icon="@Icons.Material.Filled.Visibility"
                                         Color="@Color.Primary"
                                         Title="Hide Translation"
                                         ToggledIcon="@Icons.Material.Filled.VisibilityOff"
                                         ToggledColor="@Color.Error"
                                         ToggledTitle="Show Translation"
                                         Style="float:right;" />
                </MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd>
                    @context.Key

                    <MudToggleIconButton Toggled="true"
                                         Icon="@Icons.Material.Filled.Star"
                                         Color="@Color.Warning"
                                         Title="Off"
                                         ToggledIcon="@Icons.Material.Filled.StarBorder"
                                         ToggledColor="@Color.Dark"
                                         ToggledTitle="On" />
                </MudTd>
                <MudTd>
                    @if (AlarmOn)
                    {
                        @context.Value
                    }
                    else
                    {
                        @string.Empty
                    }
                </MudTd>

            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>

        </MudTable>
        @*        @foreach (var item in _dictionary)
        {
        <MudText Typo="Typo.h3" GutterBottom="true">Counter</MudText>
        }
        *@
    </MudItem>
</MudGrid>

@*
<MudText Style="word-wrap:break-word">
    <pre>
        @_fileContent
    </pre>
</MudText>
*@

@code {

    private string _fileContent = string.Empty;
    private Dictionary<string, string> _dictionary = new Dictionary<string, string>();

    private IList<string> _letters = new List<string>();
    private IList<string> _letterFilter = new List<string>();

    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override async Task OnInitializedAsync()
    {
        _fileContent = await File.ReadAllTextAsync("wwwroot/vocabularies/verbs-lit-rus.txt");

        var rows = _fileContent.Split('\n')
            .Where(x => !string.IsNullOrWhiteSpace(x))
            .ToList();

        foreach (var row in rows)
        {
            var arr = row.Split("\t");
            _dictionary.Add(arr[0].Trim(), arr[1].Trim());
        }

        _letters = _dictionary
            .Select(x => x.Key.First())
            .Distinct()
            .Select(x => $"{x}".ToUpper())
            .OrderBy(x => x)
            .ToList();

    }

    private bool FilterFunc(KeyValuePair<string, string> pair)
    {
        if (_letterFilter.Count == 0)
            return true;

        var firstLetter = pair.Key.First().ToString().ToUpper();

        return _letterFilter.Contains(firstLetter);
    }

    private void InExLetter(string letter)
    {
        if (_letterFilter.Contains(letter))
            _letterFilter.Remove(letter);
        else
            _letterFilter.Add(letter);

    }

    public bool AlarmOn { get; set; }
    public int SwitchedOnCount { get; set; }

    private const int MaxCount = 5;

    public void OnToggledChanged(bool toggled)
    {
        // Because variable is not two-way bound, we need to update it ourself
        AlarmOn = toggled;

        if (AlarmOn)
        {
            if (SwitchedOnCount < MaxCount)
                SwitchedOnCount++;
            else
                AlarmOn = false;    // We can force a state under specific condition (max count reached)
        }
    }

    public class Letter1
    {
        public string Value { get; set; }
    }
}